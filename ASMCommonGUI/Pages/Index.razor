@page "/"
@inherits LayoutComponentBase
@using ASM.Lib
@using System.IO
@using System.Text
@inject Blazored.LocalStorage.ILocalStorageService localStorage

@inject IJSRuntime JSRuntime;
@implements IAsyncDisposable

<div class="page darkMode">
    <div class="sidebar">
        <div class="top-row pl-4 navbar navbar-dark">
            <a class="navbar-brand" href=""></a>
            <button class="navbar-toggler" @onclick="ToggleNavMenu">
                <span class="navbar-toggler-icon"></span>
            </button>
        </div>

        <div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
            <ul class="nav flex-column">
                <li class="nav-item px-3">
                    <label>Server</label>
                    <select class="form-control selectpicker" @bind="activeServer">
                        @foreach (var template in ASM.Config.Servers)

                        {
                            <option value=@template.Key>@template.Key</option>

                        }
                    </select>
                </li>
                <li class="nav-item px-3">
                    <button class="btn btn-primary form-control"
                        @onclick='() => ASM.RunServer(selectedModIds, activeServer, IgnoreOptionalKeys, PauseOnFinish, selectedMission)'>Start
                        Server</button>
                </li>
                <li class="nav-item px-3">
                    <button class="btn btn-secondary form-control"
                        @onclick='() => ASM.RunSteamModsUpdate(selectedModIds, activeServer, DeleteBeforeUpdate, PauseOnFinish)'>Run Mods Update</button>
                </li>
                <li class="nav-item px-3">
                    <button class="btn btn-warning form-control"
                        @onclick='() => ASM.RunSteamServerUpdate(activeServer, PauseOnFinish)'>Run Server Update</button>
                </li>
                @if (!string.IsNullOrEmpty(ASM.Config.Servers[activeServer].OptKeysPath))

                {
                    <li class="nav-item px-3">
                        <label class="checkboxList-item">
                            <input type="checkbox" checked=@IgnoreOptionalKeys
                                @onchange="eventArgs => { IgnoreOptionalKeys = !IgnoreOptionalKeys; }" />
                            <span>
                                Ignore Optional Keys
                            </span>
                        </label>
                    </li>

                }
                 <li class="nav-item px-3">
                        <label class="checkboxList-item">
                            <input type="checkbox" checked=@DeleteBeforeUpdate
                                @onchange="eventArgs => { DeleteBeforeUpdate = !DeleteBeforeUpdate; }" />
                            <span>
                                Delete old mod before update
                            </span>
                        </label>
                    </li>
                    <li class="nav-item px-3">
                        <label class="checkboxList-item">
                            <input type="checkbox" checked=@PauseOnFinish
                                @onchange="eventArgs => { PauseOnFinish = !PauseOnFinish; }" />
                            <span>
                                Pause console when finished
                            </span>
                        </label>
                    </li>
            </ul>
        </div>
        <div class="bottom-logo">
            <img src="_content/ASMCommonGUI/img/ASM_white.png" alt="Briefing Room Logo" />
            <span class="ver">@ASMCore.VERSION (@ASMCore.BUILD_VERSION) by <strong>John Harvey
                    (@@john681611)</strong></span>
        </div>
    </div>

    <div class="main">
        <div class="top-row px-4">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span>Launcher
            </NavLink>
            <NavLink class="nav-link" href="Config" Match="NavLinkMatch.All">
                <span class="oi oi-cog" aria-hidden="true"></span>Config
            </NavLink>
            <a href="@ASMCore.REPO_URL" target="_blank">GitHub</a>
        </div>
        <div class="content px-4">
            <div>
                <div class="generator-group flex-justify-spaced flex-margin-fix">
                    @if (showSaveModal)
                    {
                        <div class="form-group flex-block save-modal">
                            <div class="input-group">
                                <input class="form-control" @bind="templateName" placeholder="Template Name" required />
                            </div>
                            <div class="flex-justify-spaced flex-margin-fix">
                                <button class="btn btn-warning" @onclick='() => SaveTemplate()' type="button">Save</button>
                                <button class="btn btn-warning" @onclick='() => showSaveModal = false'
                                    type="button">Cancel</button>
                            </div>
                        </div>
                    }
                    else if (missingMods.Count > 0)
                    {
                        <div class="form-group flex-block save-modal">
                            <h4>Install Mods?</h4>
                            <p>
                                @foreach (var mod in missingMods.OrderBy(x => x.Value))
                                {
                                    <a href="https://steamcommunity.com/sharedfiles/filedetails/?id=@mod.Key" target="_blank">@mod.Value</a><br/>
                                }
                            </p>
                            <div class="flex-justify-spaced flex-margin-fix">
                                <button class="btn btn-warning" @onclick='() => InstallMissingMods()' type="button">Yes</button>
                                <button class="btn btn-warning" @onclick='() => ClearMissingMods()'
                                    type="button">Cancel</button>
                            </div>
                        </div>
                    }
                    else if (showDeleteModal)
                    {
                        <div class="form-group flex-block save-modal">
                            <p>Sure you want to delete @selectedTemplate?</p>
                            <div class="flex-justify-spaced flex-margin-fix">
                                <button class="btn btn-warning" @onclick='() => DeleteTemplate()' type="button">Yes</button>
                                <button class="btn btn-warning" @onclick='() => showDeleteModal = false'
                                    type="button">Cancel</button>
                            </div>
                        </div>

                    }
                    else
                    {
                        <div class="form-group flex-block">
                            <div class="input-group">
                                <select class="form-control selectpicker" @bind="selectedTemplate">
                                    <option value="">No Template</option>
                                    @foreach (var template in ASM.Config.Servers[activeServer].Templates.OrderBy(x =>
                                   x.Key).ToList())

                                    {
                                        <option value=@template.Key>@template.Key</option>
                                    }
                                </select>

                                <div class="input-group-append">
                                    @if (!string.IsNullOrEmpty(selectedTemplate))
                                    {
                                        <button class="btn btn-warning" @onclick='() => SaveTemplate()'
                                            type="button">Save</button>
                                        <button class="btn btn-danger" @onclick='() => showDeleteModal = true'
                                            type="button">Delete</button>
                                    }
                                    <button class="btn btn-warning" @onclick='() => GetTemplateNameTemplate()'
                                        type="button">Save As..</button>
                                </div>
                            </div>
                        </div>
                    }
                </div>
                <label>Starting Mission (Overrides Config: @ASM.Config.Servers[activeServer].TemplateConfigPath)</label>
                <select class="form-control selectpicker" @bind="selectedMission">
                    <option value=>No mission (config: @ASM.Config.Servers[activeServer].ConfigPath)</option>
                    @foreach (var mission in ASM.Config.Servers[activeServer].Missions.Order())
                    {
                        <option value=@mission>@mission.Replace(".pbo", "")</option>
                    }
                </select>
                <div @ref="fileDropContainer" class="file-drop-zone">
                    <InputFile OnChange="@OnTemplateUpload" @ref="inputFile" class="file-input" />
                    <CheckBoxModList Server="ASM.Config.Servers[activeServer]" Config="ASM.Config" SelectedValues="selectedModIds">
                    </CheckBoxModList>
                </div>
            </div>
        </div>
        <div class="form-group flex-block">
            <div class="input-group">
                <input class="form-control" @bind="newFolderName" placeholder="Mod Folder Name" required />
                <input class="form-control" @bind="newModSteamId" placeholder="Steam Id" required />
                <div class="input-group-append">
                    <button class="btn btn-warning"
                        @onclick='() => ASM.RunSteamModInstall(newModSteamId, newFolderName, activeServer, PauseOnFinish)'>Add New
                        Mod</button>
                </div>
            </div>
        </div>
        <div class=bottom-bar>
            <LoggerAll logs="@ASM.logStream" />
        </div>
    </div>
</div>

@code {

    //NAV -----------------------------------------------------------------------------------

    private bool collapseNavMenu = true;



    private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;



    private void ToggleNavMenu()

    {

        collapseNavMenu = !collapseNavMenu;

    }





    // ASM -----------------------------------------------------------------------------------



    private ASMCore ASM;

    private string templateName;

    private string activeServer;

    private List<string> selectedModIds;
    private Dictionary<string, string> missingMods;

    private string selectedMission;

    private string newFolderName;

    private string newModSteamId;



    private bool IgnoreOptionalKeys;
    private bool PauseOnFinish;

    private bool DeleteBeforeUpdate;


    private bool showSaveModal = false;

    private bool showDeleteModal = false;


    private string _selectedTemplate = "";
    private string selectedTemplate
    {
        get
        {
            return _selectedTemplate;
        }
        set
        {
            _selectedTemplate = value;
            LoadTemplate();
        }
    }

    protected override void OnInitialized()

    {

        ASM = new ASMCore();

        activeServer = ASM.Config.Servers.First().Key;

        selectedModIds = new List<string>();
        missingMods = new Dictionary<string,string>();

    }



    private void ToggleMod(string modId)

    {

        if (selectedModIds.Contains(modId))

            selectedModIds.Remove(modId);

        else

            selectedModIds.Add(modId);

    }

    private void GetTemplateNameTemplate()
    {
        showSaveModal = true;
    }



    private void SaveTemplate()

    {

        var template = new Template();

        foreach (var modId in selectedModIds)

        {

            template.Mods.Add(modId, ASM.Config.Servers[activeServer].Mods[modId].Name);

        }

        ASM.Config.Servers[activeServer].Templates[templateName] = template;
        selectedTemplate = templateName;
        ASM.Config.Save();
        showSaveModal = false;

    }


    private void DeleteTemplate()
    {
        ASM.Config.Servers[activeServer].Templates.Remove(_selectedTemplate);
        ASM.Config.Save();
        showDeleteModal = false;
        selectedTemplate = "";
    }



    private void LoadTemplate()

    {

        if (!ASM.Config.Servers[activeServer].Templates.ContainsKey(selectedTemplate))
        {

            templateName = "";

            selectedModIds = new List<string>();

            return;

        }

        var template = ASM.Config.Servers[activeServer].Templates[selectedTemplate];

        templateName = selectedTemplate;

        selectedModIds = template.Mods.Keys.ToList();

        StateHasChanged();

    }



    //--------------------------------------------------------------
    ElementReference fileDropContainer;
    InputFile inputFile;

    IJSObjectReference _filePasteFunctionReference;


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _filePasteFunctionReference = await JSRuntime.InvokeAsync<IJSObjectReference>("initializeFileDropZone", fileDropContainer, inputFile.Element);
        }
    }

    async Task OnTemplateUpload(InputFileChangeEventArgs e)
    {
        missingMods.Clear();
        using var stream = e.File.OpenReadStream();
        using var ms = new MemoryStream();
        await stream.CopyToAsync(ms);
        var stringData = Encoding.ASCII.GetString(ms.ToArray());
        var (newTemplateName, mods) = HTMLTemplateParser.Parse(stringData);
        var modIds = mods.Keys.ToList();
        foreach (var modId in modIds)
        {
            if (!ASM.Config.Servers[activeServer].Mods.ContainsKey(modId))
            {
                missingMods.Add(modId, mods[modId]);
            }
        }

        selectedModIds = modIds;
        templateName = newTemplateName;

        if(missingMods.Count == 0)
        {
            showSaveModal = true;
        }

        StateHasChanged();
    }

    private void InstallMissingMods()
    {
        ASM.RunSteamMultiModInstall(missingMods, activeServer, PauseOnFinish);
        ClearMissingMods();
    }

    private void ClearMissingMods()
    {
        missingMods.Clear();
        showSaveModal = false;
        StateHasChanged();
    }

    public async ValueTask DisposeAsync()
    {
        if (_filePasteFunctionReference != null)
        {
            await _filePasteFunctionReference.InvokeVoidAsync("dispose");
            await _filePasteFunctionReference.DisposeAsync();
        }
    }
}
